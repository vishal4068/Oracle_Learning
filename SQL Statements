#Data Definition Language (DDL)

Define the structure of database tables with the help of CREATE, ALTER, TRUNCATE AND DROP

1) CREATE --> Used to create Database objects like tables, views, indexes, procedures, triggers, packages
  Example - CREATE TABLE table_name(ColName1 DataType, ColName2 DataType,...);

2) ALTER --> Used to modify existing Database objects
  Example - ALTER TABLE table_name ADD (ColName1 DataType, ColName2 DataType, ...); --> Add new column
  Example - ALTER TABLE table_name MODIFY ColName1 DataType( 100 ) NOT NULL; --> Modify existing column
  Example - ALTER TABLE table_name DROP COLUMN ColName1; --> Drop existing column
  Example - ALTER TABLE table_name RENAME COLUMN old_col_name TO new_col_name; --> Rename column

3) DROP --> Used to remove/drop database objects like tables, views, indexes, procedures, triggers, packages
  Example - DROP TABLE/VIEW/INDEX/PROCEDURE/TRIGGER/PACKAGE table_name;
  
Cascade Constraints - DROP TABLE table_name CASCADE CONSTRAINTS; --> This clause ensures that all referential integrity constraints that refer to primary and unique keys in the table are also removed.

4) TRUNCATE --> Remove all records from table without considering any filtering criteria, 
Remove data page by page instead of row by row hence we can't apply WHERE clause/condition.
TRUNCATE is FASTER than DELETE in terms of execution.
IDENTITY values of tatal column will get reset.(Default value is 1) OR reset it to seed value
Syntax - GENERATED [ ALWAYS | BY DEFAULT [ ON NULL ] ] AS IDENTITY [ ( identity_options ) ]


#Data Manipulation Language(DML)

Used to INSERT, UPDATE, DELETE the existing records of table

1) INSERT --> Used to add new rows to a table.
  
-- Insert a single row
INSERT INTO table_name (column1, column2, column3) VALUES (value1, value2, value3); --> Inserting new records in specific columns oracle server automatically insert NULL values for unspesified column)

-- Insert multiple rows
INSERT INTO table_name (column1, column2, column3) VALUES 
(value1, value2, value3),
(value4, value5, value6);

2)  UPDATE --> Used to update existing records in database tables, 

-- Update specific rows
UPDATE table_name SET column1 = value1, column2 = value2 WHERE condition; --> Can use WHERE clause to limit the affected rows,

-- Update all rows
UPDATE table_name SET column1 = value1, column2 = value2; --> if we don't use WHERE clause it will update all rows.

3) DELETE --> Used to remove rows from a table.

-- Delete specific rows
DELETE FROM table_name WHERE condition;

-- Delete all rows
DELETE FROM table_name; --> It work same like TRUNCATE but it will not reset identity values.


#Transaction Control Language(TCL)

1) COMMIT --> Used to save all changes made by the transaction.(Top-Down approach)
2) ROLLBACK --> Used to undo changes since last commit, if something goes wrong.(Bottom-Up approach)
3) SAVEPOINT --> Set point to ROLLBACK to within transaction --> SAVEPOINT savepoint_name.
Why and When to Use SET TRANSACTION?
 
1. Read-Only Mode (for safety in reports)
Use when you want to just read data and avoid accidental updates.

SET TRANSACTION READ ONLY;
  SELECT * FROM employees;
 
  -- If you try:
  -- UPDATE employees SET salary = 1000;
  -- It will give an error!
 
Use it in reports or dashboards where you must not modify data.

2. Read-Write Mode (default)
If you want to make changes, you can write:
 
SET TRANSACTION READ WRITE;
  -- You can INSERT, UPDATE, DELETE
 
Note: Oracle assumes READ WRITE by default, so you usually don’t need to write this unless you're being explicit.

3. Serializable Mode (Advanced)
Use when you want to prevent others from changing the data while you’re reading it.
 
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
 
  SELECT * FROM orders WHERE status = 'pending';
  -- This ensures no one else changes 'orders' data until you COMMIT
 
This is used in financial or sensitive applications.

--We can COMMIT Rollbacked transaction but we can't ROLLBACK commited transaction.

Example -
-- Update the order details
UPDATE orders SET order_status = 'Processed' WHERE order_id = 1;

-- Create a savepoint after updating the order
SAVEPOINT order_updated;

-- Update the payment details
UPDATE payments SET payment_status = 'Completed' WHERE payment_id = 1;

-- If something goes wrong, rollback to the savepoint
ROLLBACK TO order_updated;

-- Commit the transaction if everything is successful
COMMIT;


#Data Control Language (DCL)
Used to GRANT and REVOKE permissionn from DB users.
Generally it is used by DBA.

1) GRANT --> Used to give users access privileges to database objects.
  It allow user to access specified permission.

Example - 
GRANT SELECT ON table_name TO user_name; --> Grant SELECT privilege on a table to a user

GRANT SELECT, INSERT, UPDATE ON table_name TO user_name; --> Grant multiple privileges on a table to a user

GRANT ALL PRIVILEGES ON table_name TO user_name; --> Grant all privileges on a table to a user


2) REVOKE --> Used to remove access privileges from users.

Example - 
REVOKE SELECT ON table_name FROM user_name; --> Revoke SELECT privilege on a table from a user

REVOKE SELECT, INSERT, UPDATE ON table_name FROM user_name; --> Revoke multiple privileges on a table from a user

REVOKE ALL PRIVILEGES ON table_name FROM user_name; --> Revoke all privileges on a table from a user


















  
